(() => {
  const EasyCheat = {
    version: '1.0',
    settings: {
      theme: 'dark',
      width: 600,
      height: 400,
      zIndex: 999999,
    },
    state: {
      dragging: false,
      resizing: false,
      activeTab: 'Scan',
      logs: [],
      toggles: {},
    },
    tabs: ['Scan', 'Logs', 'Watch', 'Explorer', 'Hooks', 'Spy', 'Console'],
    init() {
      this.createStyles();
      this.createGUI();
      this.bindEvents();
      this.log(`EasyCheat v${this.version} initialized`);
    },
    createStyles() {
      const style = document.createElement('style');
      style.innerHTML = `
        #easycheat {
          position: fixed;
          top: 50px;
          left: 50px;
          width: ${this.settings.width}px;
          height: ${this.settings.height}px;
          z-index: ${this.settings.zIndex};
          background: #111;
          color: #eee;
          font-family: monospace;
          border: 2px solid #555;
          border-radius: 8px;
          overflow: hidden;
          display: flex;
          flex-direction: column;
        }
        #easycheat-header {
          background: #222;
          padding: 4px 8px;
          cursor: move;
          user-select: none;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        #easycheat-header span {
          font-weight: bold;
        }
        #easycheat-controls {
          display: flex;
          gap: 4px;
        }
        .easycheat-btn {
          background: #444;
          border: none;
          color: #fff;
          padding: 2px 6px;
          cursor: pointer;
          font-size: 14px;
        }
        #easycheat-tabs {
          display: flex;
          background: #333;
        }
        .easycheat-tab {
          flex: 1;
          padding: 4px;
          text-align: center;
          cursor: pointer;
          background: #333;
        }
        .easycheat-tab.active {
          background: #555;
        }
        #easycheat-body {
          flex: 1;
          background: #000;
          overflow: auto;
          padding: 6px;
        }
        .easycheat-panel {
          display: none;
        }
        .easycheat-panel.active {
          display: block;
        }
        .easycheat-log-line {
          border-bottom: 1px solid #444;
          padding: 2px 0;
          white-space: pre-wrap;
          word-break: break-word;
        }
      `;
      document.head.appendChild(style);
    },
    createGUI() {
      const wrapper = document.createElement('div');
      wrapper.id = 'easycheat';

      // Header
      const header = document.createElement('div');
      header.id = 'easycheat-header';
      const title = document.createElement('span');
      title.textContent = 'EasyCheat';
      const controls = document.createElement('div');
      controls.id = 'easycheat-controls';
      const btnMin = document.createElement('button');
      btnMin.className = 'easycheat-btn';
      btnMin.textContent = '-';
      btnMin.onclick = () => this.toggleMinimize();
      const btnClose = document.createElement('button');
      btnClose.className = 'easycheat-btn';
      btnClose.textContent = 'X';
      btnClose.onclick = () => wrapper.remove();
      controls.appendChild(btnMin);
      controls.appendChild(btnClose);
      header.appendChild(title);
      header.appendChild(controls);
      wrapper.appendChild(header);

      // Tabs
      const tabs = document.createElement('div');
      tabs.id = 'easycheat-tabs';
      this.tabs.forEach(tab => {
        const tabEl = document.createElement('div');
        tabEl.className = 'easycheat-tab';
        tabEl.textContent = tab;
        tabEl.onclick = () => this.switchTab(tab);
        if (tab === this.state.activeTab) tabEl.classList.add('active');
        tabs.appendChild(tabEl);
      });
      wrapper.appendChild(tabs);

      // Body
      const body = document.createElement('div');
      body.id = 'easycheat-body';
      this.tabs.forEach(tab => {
        const panel = document.createElement('div');
        panel.className = 'easycheat-panel';
        panel.id = `easycheat-panel-${tab}`;
        if (tab === this.state.activeTab) panel.classList.add('active');
        body.appendChild(panel);
      });
      wrapper.appendChild(body);

      document.body.appendChild(wrapper);
    },
    switchTab(tab) {
      this.state.activeTab = tab;
      document.querySelectorAll('.easycheat-tab').forEach(el => {
        el.classList.toggle('active', el.textContent === tab);
      });
      this.tabs.forEach(t => {
        const panel = document.getElementById(`easycheat-panel-${t}`);
        if (panel) panel.classList.toggle('active', t === tab);
      });
      this.log(`Switched to ${tab} tab`);
    },
    toggleMinimize() {
      const body = document.getElementById('easycheat-body');
      const tabs = document.getElementById('easycheat-tabs');
      const isVisible = body.style.display !== 'none';
      body.style.display = isVisible ? 'none' : '';
      tabs.style.display = isVisible ? 'none' : '';
    },
    log(msg) {
      this.state.logs.push(msg);
      const logPanel = document.getElementById('easycheat-panel-Logs');
      if (logPanel) {
        const line = document.createElement('div');
        line.className = 'easycheat-log-line';
        line.textContent = `[${new Date().toLocaleTimeString()}] ${msg}`;
        logPanel.appendChild(line);
        logPanel.scrollTop = logPanel.scrollHeight;
      }
    },
    bindEvents() {
      const header = document.getElementById('easycheat-header');
      const wrapper = document.getElementById('easycheat');
      let offsetX = 0, offsetY = 0;

      header.addEventListener('mousedown', (e) => {
        this.state.dragging = true;
        offsetX = e.clientX - wrapper.offsetLeft;
        offsetY = e.clientY - wrapper.offsetTop;
      });

      document.addEventListener('mousemove', (e) => {
        if (this.state.dragging) {
          wrapper.style.left = `${e.clientX - offsetX}px`;
          wrapper.style.top = `${e.clientY - offsetY}px`;
        }
      });

      document.addEventListener('mouseup', () => {
        this.state.dragging = false;
      });
    }
  };

  EasyCheat.init();
})();
// REGELS 401–800: Interactieve tabbladen en logica
Object.assign(EasyCheat, {
  setupSpy() {
    const panel = document.getElementById('easycheat-panel-Spy');
    panel.innerHTML = '';

    const toggle = document.createElement('button');
    toggle.className = 'easycheat-btn';
    toggle.textContent = this.state.spyActive ? 'Stop Spy' : 'Start Spy';

    toggle.onclick = () => {
      this.state.spyActive = !this.state.spyActive;
      toggle.textContent = this.state.spyActive ? 'Stop Spy' : 'Start Spy';
      this.log(`Spy ${this.state.spyActive ? 'enabled' : 'disabled'}`);
    };

    panel.appendChild(toggle);
  },

  setupConsole() {
    const panel = document.getElementById('easycheat-panel-Console');
    panel.innerHTML = '';

    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = 'Voer JavaScript code in...';
    input.style.width = '100%';
    input.style.padding = '4px';
    input.style.marginBottom = '4px';
    input.style.background = '#111';
    input.style.border = '1px solid #444';
    input.style.color = '#fff';

    const output = document.createElement('div');
    output.style.maxHeight = '150px';
    output.style.overflowY = 'auto';
    output.style.background = '#222';
    output.style.padding = '4px';

    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        try {
          const result = eval(input.value);
          this.log(`>> ${input.value}`);
          this.log(`<< ${result}`);
        } catch (err) {
          this.log(`!! ${err}`);
        }
        input.value = '';
      }
    });

    panel.appendChild(input);
    panel.appendChild(output);
  },

  enableSpyClickTracking() {
    document.addEventListener('click', (e) => {
      if (!this.state.spyActive) return;

      const path = e.composedPath();
      const target = e.target;
      const tag = target.tagName.toLowerCase();
      const id = target.id ? `#${target.id}` : '';
      const cls = target.className ? `.${target.className.toString().replace(/\s+/g, '.')}` : '';

      this.log(`Clicked ${tag}${id}${cls} | text: "${target.innerText.trim()}"`);
    }, true);
  },

  enhanceLogs() {
    const logPanel = document.getElementById('easycheat-panel-Logs');
    logPanel.addEventListener('dblclick', (e) => {
      if (e.target.classList.contains('easycheat-log-line')) {
        const input = document.querySelector('#easycheat-panel-Console input');
        if (input) {
          input.value = e.target.textContent.replace(/^\[\d{2}:\d{2}:\d{2}\] (>> |<< |!! )?/, '');
          input.focus();
        }
      }
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Backspace') {
        const selected = document.querySelector('.easycheat-log-line.selected');
        if (selected) {
          selected.remove();
          this.log('Log entry removed');
        }
      }
    });

    logPanel.addEventListener('click', (e) => {
      if (e.target.classList.contains('easycheat-log-line')) {
        document.querySelectorAll('.easycheat-log-line').forEach(el => el.classList.remove('selected'));
        e.target.classList.add('selected');
      }
    });
  },

  setupScanTab() {
    const panel = document.getElementById('easycheat-panel-Scan');
    panel.innerHTML = '';

    const label = document.createElement('label');
    label.textContent = 'Scan waarde (bijv. Game.cookies): ';
    const input = document.createElement('input');
    input.type = 'text';
    input.value = 'Game.cookies';
    input.style.width = '100%';

    const button = document.createElement('button');
    button.className = 'easycheat-btn';
    button.textContent = 'Scan!';
    button.onclick = () => {
      try {
        const result = eval(input.value);
        this.log(`${input.value} = ${result}`);
      } catch (err) {
        this.log(`Scan error: ${err}`);
      }
    };

    panel.appendChild(label);
    panel.appendChild(input);
    panel.appendChild(button);
  },

  setupWatchTab() {
    const panel = document.getElementById('easycheat-panel-Watch');
    panel.innerHTML = '';

    const label = document.createElement('label');
    label.textContent = 'Waarde observeren: ';
    const input = document.createElement('input');
    input.type = 'text';
    input.value = 'Game.cookies';
    input.style.width = '100%';

    const addBtn = document.createElement('button');
    addBtn.className = 'easycheat-btn';
    addBtn.textContent = 'Toevoegen';
    addBtn.onclick = () => {
      const varName = input.value;
      if (!this.state.watchList) this.state.watchList = [];
      this.state.watchList.push(varName);
      this.log(`Toegevoegd aan Watch: ${varName}`);
    };

    panel.appendChild(label);
    panel.appendChild(input);
    panel.appendChild(addBtn);

    const watchDiv = document.createElement('div');
    watchDiv.id = 'easycheat-watchlist';
    watchDiv.style.marginTop = '10px';
    panel.appendChild(watchDiv);

    setInterval(() => {
      if (!this.state.watchList) return;
      watchDiv.innerHTML = '';
      this.state.watchList.forEach(v => {
        try {
          const val = eval(v);
          const line = document.createElement('div');
          line.textContent = `${v} = ${val}`;
          watchDiv.appendChild(line);
        } catch (e) {
          const line = document.createElement('div');
          line.textContent = `${v} = [error]`;
          watchDiv.appendChild(line);
        }
      });
    }, 1000);
  },

  setupExplorerTab() {
    const panel = document.getElementById('easycheat-panel-Explorer');
    panel.innerHTML = '';

    const label = document.createElement('label');
    label.textContent = 'Object verkennen (bv. Game): ';
    const input = document.createElement('input');
    input.type = 'text';
    input.value = 'Game';
    input.style.width = '100%';

    const exploreBtn = document.createElement('button');
    exploreBtn.className = 'easycheat-btn';
    exploreBtn.textContent = 'Explore';
    exploreBtn.onclick = () => {
      try {
        const obj = eval(input.value);
        panel.innerHTML += `<pre>${JSON.stringify(obj, null, 2)}</pre>`;
      } catch (err) {
        this.log(`Explore error: ${err}`);
      }
    };

    panel.appendChild(label);
    panel.appendChild(input);
    panel.appendChild(exploreBtn);
  },

  refreshTabs() {
    this.setupSpy();
    this.setupConsole();
    this.setupScanTab();
    this.setupWatchTab();
    this.setupExplorerTab();
    this.enhanceLogs();
    this.enableSpyClickTracking();
  }
});

// Herlaad GUI features
EasyCheat.refreshTabs();
// REGELS 801–1200: Theme, Settings, Alerts, Tabsysteem
Object.assign(EasyCheat, {
  setupSettingsTab() {
    const panel = document.getElementById('easycheat-panel-Settings');
    panel.innerHTML = '';

    const themeBtn = document.createElement('button');
    themeBtn.className = 'easycheat-btn';
    themeBtn.textContent = `Thema: ${this.state.darkMode ? 'Donker' : 'Licht'}`;
    themeBtn.onclick = () => {
      this.state.darkMode = !this.state.darkMode;
      themeBtn.textContent = `Thema: ${this.state.darkMode ? 'Donker' : 'Licht'}`;
      this.toggleTheme(this.state.darkMode);
      this.log(`Thema veranderd naar ${this.state.darkMode ? 'Donker' : 'Licht'}`);
    };

    panel.appendChild(themeBtn);
  },

  toggleTheme(dark) {
    const style = document.getElementById('easycheat-style');
    if (dark) {
      style.innerHTML = this.styles.dark;
    } else {
      style.innerHTML = this.styles.light;
    }
  },

  setupAlerts() {
    const alert = document.createElement('div');
    alert.id = 'easycheat-alert';
    alert.style.position = 'fixed';
    alert.style.bottom = '20px';
    alert.style.left = '50%';
    alert.style.transform = 'translateX(-50%)';
    alert.style.padding = '10px 20px';
    alert.style.borderRadius = '12px';
    alert.style.background = '#000a';
    alert.style.color = '#fff';
    alert.style.fontFamily = 'monospace';
    alert.style.zIndex = '999999';
    alert.style.display = 'none';
    document.body.appendChild(alert);
  },

  showAlert(msg, duration = 2000) {
    const alert = document.getElementById('easycheat-alert');
    if (!alert) return;
    alert.textContent = msg;
    alert.style.display = 'block';
    clearTimeout(this.state._alertTimeout);
    this.state._alertTimeout = setTimeout(() => {
      alert.style.display = 'none';
    }, duration);
  },

  setupTabButtons() {
    const tabs = ['Scan', 'Logs', 'Watch', 'Explorer', 'Spy', 'Console', 'Settings'];
    const tabbar = document.querySelector('.easycheat-tabs');

    tabs.forEach(tab => {
      const btn = document.createElement('button');
      btn.textContent = tab;
      btn.className = 'easycheat-btn';
      btn.onclick = () => this.switchTab(tab);
      tabbar.appendChild(btn);
    });
  },

  switchTab(name) {
    const tabs = document.querySelectorAll('.easycheat-tab');
    tabs.forEach(t => t.style.display = 'none');
    const active = document.getElementById(`easycheat-panel-${name}`);
    if (active) active.style.display = 'block';
    this.log(`Tab geswitcht naar ${name}`);
  },

  enableDragMove() {
    const bar = document.querySelector('.easycheat-bar');
    const gui = document.getElementById('easycheat-ui');

    let offsetX = 0, offsetY = 0, isDragging = false;

    bar.addEventListener('mousedown', (e) => {
      isDragging = true;
      offsetX = e.clientX - gui.offsetLeft;
      offsetY = e.clientY - gui.offsetTop;
      gui.style.transition = 'none';
    });

    document.addEventListener('mouseup', () => isDragging = false);

    document.addEventListener('mousemove', (e) => {
      if (!isDragging) return;
      gui.style.left = (e.clientX - offsetX) + 'px';
      gui.style.top = (e.clientY - offsetY) + 'px';
    });
  },

  enableWindowButtons() {
    const gui = document.getElementById('easycheat-ui');
    const closeBtn = document.createElement('span');
    closeBtn.textContent = '✕';
    closeBtn.className = 'easycheat-closebtn';
    closeBtn.style.position = 'absolute';
    closeBtn.style.right = '10px';
    closeBtn.style.top = '8px';
    closeBtn.style.cursor = 'pointer';
    closeBtn.onclick = () => {
      gui.remove();
      this.log('GUI gesloten');
    };

    const minBtn = document.createElement('span');
    minBtn.textContent = '−';
    minBtn.className = 'easycheat-minbtn';
    minBtn.style.position = 'absolute';
    minBtn.style.right = '30px';
    minBtn.style.top = '8px';
    minBtn.style.cursor = 'pointer';
    minBtn.onclick = () => {
      const body = gui.querySelector('.easycheat-body');
      body.style.display = body.style.display === 'none' ? 'block' : 'none';
      this.log('GUI geminimaliseerd/gemaximaliseerd');
    };

    gui.appendChild(closeBtn);
    gui.appendChild(minBtn);
  },

  styles: {
    dark: `
      .easycheat-ui { background: #111; color: #fff; border: 1px solid #444; }
      .easycheat-btn { background: #222; color: #fff; }
      .easycheat-log-line { color: #0f0; }
      .easycheat-log-line.selected { background: #444; }
    `,
    light: `
      .easycheat-ui { background: #eee; color: #000; border: 1px solid #ccc; }
      .easycheat-btn { background: #ddd; color: #000; }
      .easycheat-log-line { color: #080; }
      .easycheat-log-line.selected { background: #ccc; }
    `
  },

  initUI() {
    this.setupTabButtons();
    this.refreshTabs();
    this.enableSpyClickTracking();
    this.enableDragMove();
    this.enableWindowButtons();
    this.setupSettingsTab();
    this.setupAlerts();
    this.toggleTheme(this.state.darkMode || true);
    this.switchTab('Logs');
    this.log('GUI volledig geladen');
  }
});

// Start initialiseren als nog niet gedaan
if (!EasyCheat._started) {
  EasyCheat._started = true;
  EasyCheat.initUI();
}
// REGELS 1201–1600: AutoHack Tools, Explorer & Game Shortcuts
Object.assign(EasyCheat, {
  hacks: {
    autoClick: false,
    autoBuy: false,
    clickInterval: null,
    buyInterval: null
  },

  setupHackControls() {
    const panel = document.getElementById('easycheat-panel-Scan');
    panel.innerHTML = '';

    const clickBtn = document.createElement('button');
    clickBtn.className = 'easycheat-btn';
    clickBtn.textContent = 'Auto Click: UIT';
    clickBtn.onclick = () => {
      this.hacks.autoClick = !this.hacks.autoClick;
      clickBtn.textContent = `Auto Click: ${this.hacks.autoClick ? 'AAN' : 'UIT'}`;
      this.toggleAutoClick();
    };

    const buyBtn = document.createElement('button');
    buyBtn.className = 'easycheat-btn';
    buyBtn.textContent = 'Auto Buy: UIT';
    buyBtn.onclick = () => {
      this.hacks.autoBuy = !this.hacks.autoBuy;
      buyBtn.textContent = `Auto Buy: ${this.hacks.autoBuy ? 'AAN' : 'UIT'}`;
      this.toggleAutoBuy();
    };

    const setCookies = document.createElement('button');
    setCookies.className = 'easycheat-btn';
    setCookies.textContent = 'Geef 1.000.000 koekjes';
    setCookies.onclick = () => {
      if (window.Game && typeof Game.cookies !== 'undefined') {
        Game.cookies += 1000000;
        this.log('1.000.000 koekjes toegevoegd!');
        this.showAlert('1.000.000 koekjes!');
      } else {
        this.log('Game.cookies niet gevonden');
      }
    };

    panel.append(clickBtn, buyBtn, setCookies);
  },

  toggleAutoClick() {
    clearInterval(this.hacks.clickInterval);
    if (this.hacks.autoClick) {
      this.hacks.clickInterval = setInterval(() => {
        if (window.Game && typeof Game.ClickCookie === 'function') {
          Game.ClickCookie();
        }
      }, 10);
      this.log('Auto Click gestart');
    } else {
      this.log('Auto Click gestopt');
    }
  },

  toggleAutoBuy() {
    clearInterval(this.hacks.buyInterval);
    if (this.hacks.autoBuy) {
      this.hacks.buyInterval = setInterval(() => {
        if (window.Game && Game.UpgradesInStore) {
          Game.UpgradesInStore.forEach(u => u.buy());
          Game.ObjectsById.forEach(o => o.buy());
        }
      }, 1000);
      this.log('Auto Buy gestart');
    } else {
      this.log('Auto Buy gestopt');
    }
  },

  updateExplorerTab() {
    const explorer = document.getElementById('easycheat-panel-Explorer');
    explorer.innerHTML = '';
    const el = document.elementFromPoint(this.state.cursorX, this.state.cursorY);
    if (!el) return;

    const title = document.createElement('div');
    title.textContent = `Element @ (${this.state.cursorX}, ${this.state.cursorY})`;
    explorer.appendChild(title);

    const info = document.createElement('pre');
    info.textContent = this.formatElement(el);
    explorer.appendChild(info);
  },

  formatElement(el) {
    let out = `<${el.tagName.toLowerCase()}`;
    if (el.id) out += ` id="${el.id}"`;
    if (el.className) out += ` class="${el.className}"`;
    out += '>';
    if (el.innerText) out += `\nText: "${el.innerText.trim().slice(0, 100)}"`;
    return out;
  },

  initExplorerTracking() {
    document.addEventListener('mousemove', (e) => {
      this.state.cursorX = e.clientX;
      this.state.cursorY = e.clientY;
      if (this.activeTab === 'Explorer') this.updateExplorerTab();
    });
  },

  setupWatchTab() {
    const panel = document.getElementById('easycheat-panel-Watch');
    panel.innerHTML = '';

    const input = document.createElement('input');
    input.placeholder = 'bv. Game.cookies';
    input.className = 'easycheat-input';
    panel.appendChild(input);

    const addBtn = document.createElement('button');
    addBtn.className = 'easycheat-btn';
    addBtn.textContent = 'Toevoegen';
    addBtn.onclick = () => {
      const expr = input.value.trim();
      if (expr && !this.state.watchList.includes(expr)) {
        this.state.watchList.push(expr);
        this.log(`Toegevoegd aan Watch: ${expr}`);
      }
      this.updateWatchPanel();
    };
    panel.appendChild(addBtn);

    const container = document.createElement('div');
    container.id = 'easycheat-watch-values';
    panel.appendChild(container);
  },

  updateWatchPanel() {
    const container = document.getElementById('easycheat-watch-values');
    if (!container) return;
    container.innerHTML = '';

    this.state.watchList.forEach(expr => {
      let val;
      try {
        val = eval(expr);
      } catch (e) {
        val = '⚠️ Fout';
      }

      const row = document.createElement('div');
      row.textContent = `${expr} = ${val}`;
      container.appendChild(row);
    });
  },

  setupTabUpdater() {
    setInterval(() => {
      if (this.activeTab === 'Watch') this.updateWatchPanel();
      if (this.activeTab === 'Explorer') this.updateExplorerTab();
    }, 500);
  }
});

// Extra setup bij starten
EasyCheat.setupHackControls();
EasyCheat.initExplorerTracking();
EasyCheat.setupWatchTab();
EasyCheat.setupTabUpdater();
// REGELS 1601–2000: Console API, Prestige Tools, Storage, Finish
Object.assign(EasyCheat, {
  setupConsoleHelp() {
    const panel = document.getElementById('easycheat-panel-Console');
    const help = document.createElement('div');
    help.className = 'easycheat-console-help';
    help.innerHTML = `
      <b>Snelle commando's:</b><br>
      <code>ec.log('Hallo')</code> – Schrijft naar log tab<br>
      <code>ec.watch('Game.cookies')</code> – Voegt item toe aan Watch<br>
      <code>ec.spy()</code> – Activeert click-spy<br>
      <code>ec.cheatCookies(1e6)</code> – Geef koekjes<br>
      <code>ec.clear()</code> – Wis logs<br>
      <code>ec.close()</code> – Sluit GUI<br>
    `;
    panel.appendChild(help);
  },

  watch(expr) {
    if (!this.state.watchList.includes(expr)) {
      this.state.watchList.push(expr);
      this.updateWatchPanel();
      this.log(`Toegevoegd aan Watch: ${expr}`);
    }
  },

  spy() {
    this.state.spyEnabled = true;
    this.log('Spy modus actief: klik een element aan');
  },

  cheatCookies(amount = 1000000) {
    if (window.Game && typeof Game.cookies !== 'undefined') {
      Game.cookies += amount;
      this.log(`${amount.toLocaleString()} koekjes toegevoegd!`);
    }
  },

  clear() {
    this.state.logs = [];
    this.updateLogs();
  },

  close() {
    const root = document.getElementById('easycheat-root');
    if (root) root.remove();
  },

  prestigeBoost() {
    if (window.Game && typeof Game.EarnHeavenlyChips === 'function') {
      Game.EarnHeavenlyChips(10000);
      Game.UpgradesById.forEach(u => {
        if (u.pool === 'prestige') u.unlock();
      });
      this.log('10.000 prestige punten + upgrades!');
    }
  },

  unlockAllUpgrades() {
    if (window.Game) {
      for (let u in Game.UpgradesById) Game.UpgradesById[u].unlock();
      this.log('Alle upgrades ontgrendeld!');
    }
  },

  unlockAllAchievements() {
    if (window.Game) {
      for (let a in Game.AchievementsById) Game.AchievementsById[a].unlock();
      this.log('Alle achievements ontgrendeld!');
    }
  },

  saveState() {
    localStorage.setItem('easycheat-state', JSON.stringify(this.state));
    this.log('Instellingen opgeslagen');
  },

  loadState() {
    const saved = localStorage.getItem('easycheat-state');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        this.state.watchList = parsed.watchList || [];
        this.state.spyEnabled = parsed.spyEnabled || false;
        this.updateWatchPanel();
        this.log('Instellingen hersteld!');
      } catch {
        this.log('Kon opgeslagen data niet laden');
      }
    }
  },

  resetGUI() {
    localStorage.removeItem('easycheat-state');
    this.state = {
      logs: [],
      watchList: [],
      spyEnabled: false,
      cursorX: 0,
      cursorY: 0,
    };
    this.log('Reset voltooid');
  },

  injectControlFooter() {
    const footer = document.createElement('div');
    footer.className = 'easycheat-footer';
    footer.innerHTML = `
      <button class="easycheat-btn" onclick="ec.saveState()">💾 Opslaan</button>
      <button class="easycheat-btn" onclick="ec.loadState()">📂 Laden</button>
      <button class="easycheat-btn" onclick="ec.resetGUI()">♻️ Reset</button>
      <button class="easycheat-btn" onclick="ec.close()">❌ Sluiten</button>
    `;
    document.getElementById('easycheat-root').appendChild(footer);
  },

  credits() {
    this.log('🎉 EasyCheat GUI v1.0 geladen');
    this.log('Gemaakt door ChatGPT voor Cookie Clicker & meer!');
    this.log('Gebruik met verantwoordelijkheid 😉');
  }
});

// Auto setup:
EasyCheat.setupConsoleHelp();
EasyCheat.credits();
EasyCheat.loadState();
EasyCheat.injectControlFooter();

// Expose global alias
window.ec = EasyCheat;
